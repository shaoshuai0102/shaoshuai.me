---
layout: post
title: "JS代码的可维护性"
date: 2011-01-22 16:46
comments: true
categories: tech
---

最近在研究Google Closure Compiler，顺带看了不少Closure Library的代码。一边瞄Google的Js代码组织方式，一遍惊叹于Google在代码可维护性上下的功夫。Library里那么多代码，在[Google JavaScript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml)的指导下风格一致，看起来毫不费力。特别值得一提的是，注释详细给力，数量远超代码行数。

风格统一、注释详细、容易阅读的代码意味着缩减大型团队巨大的沟通开销，开发者可以很容易对代码做出贡献，以及良好的可维护性带来的维护成本降低。作为JS开发者，日常开发中，如果你觉得很多时候都在纠结如何从众多实现方法中挑选出一种来实现一个功能，这说明有些地方出问题了。我认为，简单的实现，容易阅读的实现，易于维护的实现应该收到重视。JS作为一种动态函数式语言有高度的灵活性，这导致对于一个功能往往存在n多种不同的代码书写方式。是不是经常看不懂别人写的代码？是不是经常看不懂自己以前写的代码？其实，为了节省几个字节、一点点运算，甚至为了仅仅为了更酷一点而把代码组织的晦涩难懂，是非常得不偿失的。

团队开发中会发现，对于一个逻辑稍微复杂的产品，往往花在上面的时间，绝不仅仅是第一次实现它的时间。由于产品的更新换代，设计师的交互方式改动、业务方的业务逻辑变更势必带来代码的再次维护。然而在实际工作中，一个人往往参与多线操作，下次维护这个产品之前可能要经历其他几个产品的开发，那么你怎么保证能够在再次维护它时能够快速而精准的修改代码？况且，下一次负责代码维护的人可能根本就不是代码的作者，你的代码绝技可能会秒杀队友。在前端，问题很严重。

我想，可维护性，这是解决很多现有问题的关键字。

那么，如何去做：

1.  **统一简单的代码风格**。这里有两个关键字，统一和简单。你不是一个人在战斗，我们都在“云战斗”，代码不仅要自己看得懂，队友也要看得懂，所以势必要统一风格。而且代码风格要简单化，有两个好处：第一，新人加入比较容易，学习代价小，容易普及；第二，开发者可以将大部分精力focus在功能逻辑设计上面，而不用再整天纠结怎么写代码。这些，都是成本，降低成本才能利益最大化。

2.  **设计先行**。开发者倾向于为了快速实现，匆匆码代码，功能差不多了，再修修补补，最后产出一陀自己都不想再看一眼的代码。其实在软件设计领域，早就有很多指导程序设计的思想、相应的方法论和配套的工具，前端开发者作为迟到的一群人却鲜有人愿意拿起这些武器。

    对于简单页面的实现，极少的功能你可以随随便便写几行交差，没问题。但是对于复杂逻辑的、可以提高到应用级别的产品，往往需要后续大量维护，你再这么干就不太好了。比较流行的设计思想当属面向对象的设计，先设计一下你的数据模型，类结构组织等，能让最后产出的代码质量显著提高。虽然近几年也有去面向对象设计的思想出现，但是它还是很能解决问题的。所以我也没有觉得，一定要用面向对象的设计，如果其他的设计理念方法论可以很好的适应前端开发，当然是可以的。但是，设计要先于编码。而且，设计产出的文档是以后代码维护的重要依据。

3.  **详细的注释和文档**。这个是可维护性的重要因素，缺之不可。

最近在上面三个方面都尝试了些，说一些收获。

1.  代码风格推荐Google的方式，目前应该是最完善的，而且风格很简单。可以移步[Google JavaScript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml)查看。代码风格的细节不是那么重要，只要能够达成共识，细节不必要太扣的。

2.  前一段时间对公司内部一个项目以面向对象的方式重构了一次代码，收效非常好。当然这种程度远远不够，最近在看《Practical Object-Oriented Design with UML》，收获颇多，打算在前端种尝试一下UML。还有在组件开发中尝试运用FSM（有限状态机），让组件更加健壮。记得有一次跟周爱民老师一起吃饭，周老师说可能在前端引入建模这些重型的思想不容易被接受，可能如此，倒也值得一试。我的想法是，最好的情况是把这些方法论能够实质化为工具，接下来会继续尝试。

3.  注释其实就是文档的一部分。在js开发中，使用jsdoc可以把代码中的注释转化为文档。这里值得一提的是，Google的Closure Compiler使用注释中的annotation提供强类型检测，可以有效提高代码质量。昨天刚翻译了一篇文章，可能会有所帮助——[怎样为cc编写注解](https://docs.google.com/document/pub?id=1AhDXJujwdc3CrF2XQ0NtwivhYmMA7YsuRcWCkBbWR0A)。

关于Google Closure，推荐一本书《Closure: The Definite Guide》，可以发 email向我索取。


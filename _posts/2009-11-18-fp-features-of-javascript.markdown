---
layout: post
title: "Javascript的函数式语言特性"
date: 2009-11-18 15:16
comments: true
categories: tech
---

1930年前后，四位著名的人物——阿兰·图灵、约翰·冯·诺依曼、库尔德·歌德尔和阿隆左·丘奇展开了对形式化运算系统的研究。他们力图通过所谓的“形式系统“，来证明一个重要的命题：可以用简单的数学法则表达现实系统。1936年，图灵提出了”图灵机“的形式系统，冯·诺依曼提出了EDVAC体系设计，以及其上的编码程序、纸带存储与输入，完全实现了图灵的科学预见与构思。我们通常所使用的编程环境便是架构与这一体系之上。图灵机运算系统的本质是：通过修改内存来反映运算的结果。所有我们目前大部分编程都是通过围绕数据结构设计算法，进行运算。

四位先驱之一的阿隆左·丘奇的研究成果是一种称为Lambda演算的形式系统。这个系统的本质上就是一种虚拟的机器的编程语言——而不是虚拟的机器，它的基础是一些以函数为参数和返回值的函数。函数式语言是一种集中的体现。

我们来看几个例子：

    //javascript代码
    v = (bTrue ? 3+4 : 3*4);

使用函数来消减一次传递参数：

    //javascript代码
    function f_add(x,y) {
        return x+y;
    }

    function f_mul(x,y) {
        return x*y;
    }

    v=(bTure ? f_add : f_mul)(3,4);

在这里，+和*就相当与f_add和f_mul这两个函数，除开赋值运算符之外的“求值表达式”部分，我们可以把代码改写成：（注意以下代码并不能运行）

    (bTrue ? “+”: ”*”)(3,4);

当运算符等义于某个（lambda）函数时，就可以称得上是一种函数式语言了。

函数式语言的特性集：

*   在函数外消除语句，只使用表达式和函数，通过连续求值来组织代码
*   在值的概念上，函数可以作为运算元参与表达式运算
*   在逻辑概念上，函数等义于表达式运算符，其参数是运算元，返回运算结果
*   函数严格强调无副作用

Javascript的函数便可以作为运算元，函数可以代替运算符，既可以作为数据值存储与向函数传入传出，又可以作为函数来执行调用。从另一个角度——“函数/表达式运算的效果”来看，这一切就变成了“所有的东西都是值”。因为函数是值，所有函数可以被作为值来存储到变量，也可以声明它的直接量；可以直接参与表达式的运算；可以作为其他函数的参数传入，或者作为结果值传出。

一言以概之，*函数是第一型（fist-class data types）*。更加直观的说，它表现为如下特性：

*   能够表达为匿名的直接量
*   能被变量存储
*   能被其他数据结构存储
*   有独立而确定的名称（如语法关键字）
*   可（与其他数据实体）比较
*   可作为例程参数传递
*   可作为函数结果值返回
*   在运行期可创建
*   能够以序列化的形式表达
*   可（以自然语言的形式）读的
*   能在分布的或运行中的进程中传递与存储
*   ...

所有这些特性的要点在于：关注运算，以及运算之间的关系。

Javascript并不是纯粹的一种函数式语言泛型，它还具有其他语言特征，是一种动态函数式语言。它具有很高的灵活性，以至于使它成为一种“*易学难精*”的语言。

注：以上观点出自《动态函数式语言精髓》，暨《Javascript语言精髓与变成实践》精简版。由InfoQ免费发放。我对Javascirpt的了解并不深入，读此书也是懵懂。所以为防止表达与真相相差太远，很多观点仍是引用原文。虽然可能了解这些对于实际的动手操作并没有立竿见影的帮助效果，但是了解语言本身的特性以及设计思想会对以后逐渐深入的学习有莫大帮助。

